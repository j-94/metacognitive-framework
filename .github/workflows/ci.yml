name: Donkey CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mutations:
        description: 'Custom mutations to test (space-separated)'
        required: false
        default: 'adjust_recursion_depth reweight_tool_efficiency'

jobs:
  validate:
    name: Validate DSL Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Validate DSL syntax
        run: make validate

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run unit tests
        run: make test
      
      - name: Run pytest suite
        run: make pytest || true

  delta-test:
    name: Delta Testing
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Delta Tests
        id: delta-test
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.mutations }}" ]; then
            echo "Running custom mutations: ${{ github.event.inputs.mutations }}"
            make delta-test-custom MUTATIONS="${{ github.event.inputs.mutations }}"
          else
            echo "Running default delta tests"
            make delta-test
          fi
      
      - name: Generate Delta Report
        if: always()
        run: make delta-test-report
      
      - name: Upload Delta Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: delta-test-results
          path: |
            delta_test_report.html
            mutation_observer_log.json
      
      - name: Comment PR with Delta Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read mutation log
            let summary = '## 🔬 Delta Test Results\n\n';
            
            try {
              const log = JSON.parse(fs.readFileSync('mutation_observer_log.json', 'utf8'));
              const latestTest = log.tests[log.tests.length - 1];
              
              if (latestTest && latestTest.results) {
                summary += '| Mutation | Alignment Δ | Novelty Δ | Efficiency Δ | Success Δ |\n';
                summary += '|----------|-------------|-----------|--------------|----------|\n';
                
                latestTest.results.forEach(result => {
                  if (result.success && result.validation) {
                    const deltas = result.validation.deltas;
                    summary += `| ${result.mutation} `;
                    summary += `| ${deltas.alignment_score ? deltas.alignment_score.percent_change.toFixed(1) + '%' : 'N/A'} `;
                    summary += `| ${deltas.novelty_gradient ? deltas.novelty_gradient.percent_change.toFixed(1) + '%' : 'N/A'} `;
                    summary += `| ${deltas.resource_efficiency ? deltas.resource_efficiency.percent_change.toFixed(1) + '%' : 'N/A'} `;
                    summary += `| ${deltas.success_rate ? deltas.success_rate.percent_change.toFixed(1) + '%' : 'N/A'} |\n`;
                  }
                });
                
                summary += '\n[View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
              }
            } catch (e) {
              summary += '❌ Failed to parse delta test results\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/secrets
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."
          time make run DOMAIN=math
          time make run DOMAIN=rag
          time make run DOMAIN=vision
      
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'customSmallerIsBetter'
          output-file-path: benchmark_results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [validate, test, delta-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Generate documentation
        run: |
          echo "# Donkey Bootstrap Experiment Plan" > docs/index.md
          echo "" >> docs/index.md
          cat README.md >> docs/index.md
          echo "" >> docs/index.md
          echo "## Latest Delta Test Results" >> docs/index.md
          echo "" >> docs/index.md
          echo "See [artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> docs/index.md
      
      - name: Deploy to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs